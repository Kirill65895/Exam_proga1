public class Pizza
{
    public string Dough { get; set; }
    public string Sauce { get; set; }
    public List<string> Toppings { get; set; } = new List<string>();

    public void Display()
    {
        Console.WriteLine($"Тесто: {Dough}");
        Console.WriteLine($"Соус: {Sauce}");
        Console.WriteLine($"Начинки: {string.Join(", ", Toppings)}");
    }
}
public class PizzaBuilder
{
    private readonly Pizza _pizza = new Pizza();

    public PizzaBuilder SetDough(string dough)
    {
        _pizza.Dough = dough;
        return this; // Возвращаем this для Fluent-стиля
    }

    public PizzaBuilder SetSauce(string sauce)
    {
        _pizza.Sauce = sauce;
        return this;
    }

    public PizzaBuilder AddTopping(string topping)
    {
        _pizza.Toppings.Add(topping);
        return this;
    }

    public Pizza Build()
    {
        return _pizza;
    }
}
var pizza = new PizzaBuilder()
    .SetDough("Тонкое")
    .SetSauce("Томатный")
    .AddTopping("Сыр")
    .AddTopping("Пепперони")
    .Build();

pizza.Display();

Builder (Строитель) — порождающий паттерн проектирования, который позволяет создавать сложные объекты пошагово, используя различные представления и при этом не привязываясь к классам, которые производят эти объекты.

Тип паттерна
Builder относится к порождающим паттернам, так как он связан с созданием объектов, особенно когда их создание является сложным и требует пошагового подхода.

Описание и назначение
Основная цель паттерна Builder — отделить конструирование сложного объекта от его представления, позволяя использовать один и тот же процесс конструирования для создания различных представлений.
Паттерн особенно полезен в следующих случаях:
При создании объектов с множеством параметров
Когда необходимо создавать различные варианты объекта
При построении объектов, требующих последовательного создания
Когда процесс создания объекта сложнее, чем простой вызов конструктора

Компоненты паттерна
Builder — абстрактный интерфейс для создания частей продукта
ConcreteBuilder — конкретный строитель, создающий и представляющий продукт
Director — класс, управляющий процессом построения
Product — создаваемый объект

Метафоры из реального мира
Сборка мебели — пошаговая инструкция по сборке, где каждый шаг создает определенную часть

Потенциальные проблемы
При использовании паттерна Builder могут возникнуть следующие проблемы:
Сложность реализации — необходимость создания множества классов и интерфейсов
Избыточность кода — при создании простых объектов может быть излишним
Проблемы с масштабируемостью — при добавлении новых частей продукта может потребоваться изменение всех строителей
