-----------------------------------------------------------------------------------------------------------------------------------------------------------
// Простая копия
using System;

// Базовый класс, реализующий ICloneable
public abstract class Shape : ICloneable
{
    public int X { get; set; }
    public int Y { get; set; }
    public string Color { get; set; }

    public abstract void Draw();

    // Реализация глубокого копирования
    public object Clone()
    {
        return this.MemberwiseClone(); // Поверхностная копия (для глубокой нужно ручное копирование)
    }
}

// Конкретный класс-прототип
public class Rectangle : Shape
{
    public int Width { get; set; }
    public int Height { get; set; }

    public override void Draw()
    {
        Console.WriteLine($"Рисуем прямоугольник в ({X}, {Y}), цвет: {Color}, размер: {Width}x{Height}");
    }
}
class Program
{
    static void Main()
    {
        // Создаем оригинальный объект
        var originalRect = new Rectangle
        {
            X = 10,
            Y = 20,
            Color = "Красный",
            Width = 100,
            Height = 50
        };

        // Клонируем его
        var clonedRect = (Rectangle)originalRect.Clone();
        clonedRect.Color = "Синий"; // Меняем свойство у клона

        // Проверяем, что оригинал не изменился
        originalRect.Draw();  // "Рисуем прямоугольник в (10, 20), цвет: Красный, размер: 100x50"
        clonedRect.Draw();    // "Рисуем прямоугольник в (10, 20), цвет: Синий, размер: 100x50"
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Глубокое копирование
public class Circle : Shape
{
    public int Radius { get; set; }
    public List<string> Tags { get; set; } = new List<string>();

    public override void Draw()
    {
        Console.WriteLine($"Рисуем круг в ({X}, {Y}), цвет: {Color}, радиус: {Radius}, теги: {string.Join(", ", Tags)}");
    }

    // Глубокая копия
    public new Circle Clone()
    {
        var clone = (Circle)base.Clone();
        clone.Tags = new List<string>(this.Tags); // Копируем список
        return clone;
    }
}
var originalCircle = new Circle
{
    X = 5,
    Y = 5,
    Color = "Зеленый",
    Radius = 10,
    Tags = { "Важный", "Круглый" }
};

var clonedCircle = originalCircle.Clone();
clonedCircle.Tags.Add("Клон");

originalCircle.Draw();  // Теги: "Важный, Круглый"
clonedCircle.Draw();    // Теги: "Важный, Круглый, Клон"
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Prototype (Прототип) — это порождающий паттерн проектирования, который позволяет создавать новые объекты путем клонирования существующего объекта-прототипа.
Тип паттерна Prototype относится к порождающим паттернам, так как он связан с созданием объектов на основе существующего прототипа.

Основная цель паттерна Prototype — обеспечить эффективное создание объектов путем клонирования прототипов, когда создание объектов через конструкторы затруднено или неэффективно.
Паттерн особенно полезен в следующих случаях:
Когда классы объектов неизвестны заранее и определяются во время выполнения.
Когда создание объекта через конструктор сложно или затратно.
Когда необходимо создавать объекты на основе существующих экземпляров.

Метафоры из реального мира
Ксерокопия документа — создание точной копии существующего документа.

Потенциальные проблемы
При использовании паттерна Prototype могут возникнуть следующие проблемы:
Глубокое копирование — необходимо правильно реализовать механизм клонирования, чтобы избежать проблем с ссылками.
Сложность клонирования — если объект содержит сложные структуры данных или внешние зависимости.
Проблемы с производительностью — при клонировании больших объектов может потребоваться значительное время и ресурсы.
